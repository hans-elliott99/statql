

# Installed sqlite via:
wget https://www.sqlite.org/2024/sqlite-amalgamation-3450200.zip
unzip sqlite-amalgamation-3450200.zip

Necessary linked libraries for sqlite determined from:
https://www.sqlite.org/howtocompile.html


# Notes

Vectors:  
The key data structure for this program is a "vector" which is inspired by R vectors, in that most objects needed for math operations can be treated as a vector.  
(They are actually fixed length currently but will probably become dynamic vectors eventually... but more often than not for mathematical/statistical operations we know the size of inputs and outputs and can preallocate).  

Further inspired by R, the vector API is built around the ARRP struct, which is essentially just a pointer to the actual vector data (sort of equivalent to R's SEXP). The actual data is stored in the ArrayStruct (sort of equivalent to R's SEXPREC), which can be either an INTS_ARR, DOUBLES_ARR, or STRINGS_ARR, and data is accessed using public functions.  

Vector allocation is done on a global memory stack ("memstack") which is a linked list of memory blocks. This makes it easier to free all memory at the end of the program and helps the API because it allows functions to return ARRP "objects" to the user. A vector can still be freed by the user when a vector is no longer needed.  


Matrices:  
Matrices are fundamentally just vectors with additional dimension information. The actual data is still stored in the ArrayStruct, and an element can be accessed using indexing i * ncols + j. All ARRP have nrows and ncols fields but they are set to 0 for vectors and >0 for matrices.  

Should we use ARRP for matrices too? Could have nrow and ncol fields and just keep nrow = 0 for vectors...

then element wise vector operations would apply as element wise operations for matrices too...  
i.e., vectors are special cases of matrices.


TODO:
https://stackoverflow.com/questions/1923837/how-to-use-nan-and-inf-in-c




2024-04-03:
- Thinking about how to couple matrices and vectors... where vectors are just special cases of matrices but it can be convenient to treat them separately since they are almost more commonly needed.  
    - If vectors are just matrices, then we can use "dims" to determine the amount of data in the underlying vector.
    - If vectors are separated, then we end up having "dims" be unused for vectors and we have to check for this in the code.
    - Which is more convenient for user? What's the best way to check if a matrix is just a vector...
        - further, have to specify between row vectors and column vectors, or everything is just a matrix!
- I definitely see myself refactoring much of the underlying vector/matrix code - all in all, it's quite simple and quick to write/rewrite. It's fun to try different design patterns and see what works best.
- What I do like and plan to keep is the "global memory stack", as I'm calling it, which is just a global doubly-linked-list where all objects are allocated.
    - on one hand this is nice since it makes it easy to keep track of allocations, which then also makes it easy to free all memory at the end of the program (although it's not really a good idea to rely on this, it's still nice to have).
    - more importantly, I like what it enables from a design perspective. all objects live in this global list and users just get pointers to these objects. it abstracts away the memory management a bit, and also makes it easy to pass around objects, allowing the backend to be very intentional about when data is modified in place or copied into a new object.
        - this idea is obviously inspired by R's SEXP. It's interesting to think about why a garbage collector is needed for R, where a whole prog. lang. is built on top of this idea - if you don't want the user to have to worry about memory management, you don't want the global memory stack to get cluttered up over time... for this program it makes sense to stay "lower level" and manually free intermediate objects when they are no longer needed. R's GC just eliminates the need to think about this... (also I'm sure there are other interesting reasons for the GC, will have to research some day)
    




2024-06-02

Could be nice to have 2 global memory stacks - one for internal use and one for the end user?  

